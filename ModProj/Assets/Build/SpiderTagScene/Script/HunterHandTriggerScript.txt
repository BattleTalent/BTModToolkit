
local HunterHandTrigger = {
    isExitAct = 0
}

function HunterHandTrigger:Init(control, hand)
    self.control = control
    self.hand = hand
    
    if not IsNullOrDestroyed(hand) then
        self.character = hand.character
        
        self:SetToHand()
    end
end

function HunterHandTrigger:SetToHand()
    self.trans:SetParent(self.hand.physicsHand.transform)
    local handCol = self.hand.physicsHand.hudHandCol
    
    self.trans.localScale = handCol.transform.localScale
    self.trans.localPosition = handCol.transform.localPosition
    self.trans.localRotation = handCol.transform.localRotation
    
    self.col.size = handCol.size
    self.col.center = handCol.center
end

--function HunterHandTrigger:OnTriggerStay(collider)
--    if self.control then
--        self.control:TriggerStay(collider)
--    end
--end

function HunterHandTrigger:OnTriggerEnter(collider)
    local pu = CL.PhysicsUnit.GetPhysicsUnitTopDown(collider)
    
    if IsNullOrDestroyed(pu) then
        return
    end
    
    if pu.unitType ~= CL.Tagger.Tag.PlayerRole then
        return
    end
    
    if pu.character == self.character then
        return
    end
    
    print("hunter trigger with player-------:" .. pu.character.networkPlayer.netId)

    if self.control then
        self.control:HunterTriggerPlayer(self.character, pu.character, collider, self.trans.position)
    end
end

return Class(nil, nil, HunterHandTrigger)