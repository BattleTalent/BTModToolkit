
local BuffMenu = {
}

function BuffMenu:MenuInit(trans, hand)
    self.hand = hand
    if IsNullOrDestroyed(self.hand) then
        return
    end

    local headset = self.hand.character:GetHeadset()
    self.updateActId = CL.Scheduler.RemoveSchedule(self.updateActId)
    
    self.updateActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            if not IsNullOrDestroyed(trans) then
                self:UpdatePositionFollow(trans.position, headset)
            end
        end
    , 0, -1)
    :SetUpdateChannel(CL.Scheduler.UpdateChannel.Update).actionId
end

function BuffMenu:Show(isShow)
    self.trans.gameObject:SetActive(isShow)
end


function BuffMenu:RefleshConsole(str)
    self.consoleText.text = str
end

function BuffMenu:HapticPulse()
    if self.hand then
        self.hand:HapticPulse(self.hand.character.skillChargeHapticCurve, 0.2, 0.8)
    end
end

function BuffMenu:UpdatePositionFollow(pos, headset)
    if IsNullOrDestroyed(headset) then
        return
    end
    
    self.trans.position = UE.Vector3.Lerp(self.trans.position, pos, 0.9)
    self.trans.rotation = UE.Quaternion.LookRotation(pos - headset.position)
end

function BuffMenu:SetHunter(flag)
    self.hunterNode:SetActive(flag)
    self.defaultNode:SetActive(not flag)
end

function BuffMenu:ResetState()
end

return Class(nil, nil, BuffMenu)