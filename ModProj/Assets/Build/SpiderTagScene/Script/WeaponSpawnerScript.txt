
local WeaponSpawner = {
    ibNames = {"WMD_Dagger_Tag"},
    pendantList = {},
    pendantPool = {},
    
    countdownList = {},
    hangTime = 30,
}

function WeaponSpawner:Awake()
    self.rangeBox.gameObject:SetActive(false)
    
    self.OnPendantRelease = function(pendant)
        if not self.pendantList[pendant] then
            return
        end
        
        local go = self.pendantList[pendant]
        self:GiveBackAnchorObj(go)
        self.pendantList[pendant] = nil
    end
end

function WeaponSpawner:SpawnIBAtRandomPos()
    local pos = self:GetRandomSpawnPosition()
    if pos then
        self:SpawnRandomIBAtPos(pos)
    end
end

function WeaponSpawner:ClearUnGrabIB()
    for k, v in pairs(self.pendantList) do
        if IsNullOrDestroyed(k.gameObject) then
            return
        end
        
        k.ib:CostDurability(k.ib.durailityMax)
        self:GiveBackAnchorObj(v)
    end
    
    self.pendantList = {}
end

function WeaponSpawner:GiveBackUnGrabIB(pendant)
    if not self.pendantList[pendant] then
        return
    end
    
    local ib = pendant.ib
    self.countdownList[ib] = nil
    ib:CostDurability(ib.durailityMax)
    self:GiveBackAnchorObj(self.pendantList[pendant])
    self.pendantList[pendant] = nil
end

function WeaponSpawner:OnGrabPendantIB(ib)
    CL.Scheduler.RemoveSchedule(self.countdownList[ib])
    self.countdownList[ib] = nil
end

function WeaponSpawner:GetRandomSpawnPosition()
    local pos = nil
    local count = 10
    while count > 0 do
        pos = self:GetRandomPoint()
        pos = self:GetSpawnPointByPos(pos)
        if pos then
            return pos
        end
        count = count - 1
    end
    
    return pos
end

function WeaponSpawner:GetSpawnPointByPos(pos)
    local hit, hitInfo = UE.Physics.SphereCast(pos, 
                0.3,
                UE.Vector3.down, 30, UE.LayerMask.GetMask(
                UE.LayerMask.LayerToName(CL.LayerDefine.EnvLayer.value)))
    CL.DebugDraw.DrawLine(pos, pos + UE.Vector3.down * 30, UE.Color.red, 3)
    if not hit then
        return nil
    end
    --local pu = CL.PhysicsUnit.GetPhysicsUnitTopDown(hitInfo.collider)
    --if not IsNullOrDestroyed(pu) and pu.unitType ~= CL.Tagger.Tag.SceneObject then
    --    return nil
    --end
    return hitInfo.point + UE.Vector3.up
end

function WeaponSpawner:GetRandomPoint()
    local extents = self.rangeBox.size / 2
    local pos = UE.Vector3(
            math.random(-extents.x, extents.x),
            math.random(-extents.y, extents.y),
            math.random(-extents.z, extents.z)
        ) + self.rangeBox.center
    
    
    
    return pos
end

function WeaponSpawner:SpawnRandomIBAtPos(pos)
    local random = math.random(1, #self.ibNames)
    local name = self.ibNames[random]
    
    CL.Network.NetworkSpawnMgr.Instance:NetworkSpawnIB(name, 
        pos, UE.Quaternion.identity,
        false, false, 0, true, 
        function(netIb, go)
            if IsNullOrDestroyed(go) then
                return
            end
            local ib = netIb.ib
            if IsNullOrDestroyed(ib) then
                return
            end
            
            local anchorObj = self:GetAnchorObj()
            anchorObj:SetActive(true)
            anchorObj.name = "PendantRoot_"..ib.gameObject.name
            anchorObj.transform.position = pos
            anchorObj.transform.rotation = UE.Quaternion.identity
            local pendant = CL.InteractBasePendant.MakeLoosePendant(ib.gameObject, ib, anchorObj.transform)
            self.pendantList[pendant] = anchorObj
            
            pendant.ReleaseEvent = self.OnPendantRelease
            
            local itx = ib.gameObject:GetComponent(typeof(CL.InteractTriggerX))
            if itx then
                local script = itx.script:GetSelf()
                script:SetSceneController(self.controller)
            end
            
            local countdownId = CL.Scheduler.Create(pendant,
                function(sche, t, s)
                    self:GiveBackUnGrabIB(pendant)
                end
            , 0, 0, self.hangTime).actionId
            
            self.countdownList[ib] = countdownId
        end)
end

function WeaponSpawner:GetAnchorObj()
    local obj = nil
    if #self.pendantPool > 0 then
        obj = self.pendantPool[#self.pendantPool]
        table.remove(self.pendantPool, #self.pendantPool)
    end
    if IsNullOrDestroyed(obj) then
        obj = UE.GameObject("AnchorObj")
    end
    return obj
end

function WeaponSpawner:GiveBackAnchorObj(obj)
    obj:SetActive(false)
    table.insert(self.pendantPool, obj)
end

return Class(nil, nil, WeaponSpawner)