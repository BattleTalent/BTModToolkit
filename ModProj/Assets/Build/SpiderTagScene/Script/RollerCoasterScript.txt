local RolerCoster = {
    speed = 2,
    disDelta = 0.3,
}

function RolerCoster:Start()
    self:StartRun()
end

function RolerCoster:OnEnable()
    self:StartRun()
end

function RolerCoster:StartRun()
    local paths = self.pathLb.script:GetSelf().pathPoint
    local idx = 0
    local count = #paths
    local curPos = paths[idx + 1]
    idx = idx + 1
    local nextPos = paths[idx + 1]
    nextPos = paths[idx + 1]
    self.trans.position = curPos
    local riginQua = self.trans.rotation
    CL.Scheduler.RemoveSchedule(self.runActId)
    self.runActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            local vec = (nextPos - self.trans.position)
            local dis = vec.magnitude
            if dis < 0.1 then
                idx = (idx + 1) % count
                nextPos = paths[idx + 1]
            end
            local point = (vec / dis) * UE.Time.deltaTime *self.speed + self.trans.position
            --self.target.position = nextPos
            local qua = UE.Quaternion.LookRotation(vec)
            --self.target.rotation = qua
            local q_r = riginQua * UE.Quaternion.Inverse(qua)
            local anchor = self.connectRb.transform:InverseTransformPoint(point)
            self.joint.connectedAnchor = anchor
            self.joint.targetRotation = q_r
        end
    , 0, -1):SetUpdateChannel(CL.Scheduler.UpdateChannel.FixedUpdate).actionId
end

return Class(nil, nil, RolerCoster)