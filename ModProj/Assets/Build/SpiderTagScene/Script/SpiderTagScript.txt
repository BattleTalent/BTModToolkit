local SpiderTag = {
    --setup players
    setupPlayers = {},
    trigList = {},
    
    startCountdown = 5,
    endCountdown = 10,
    roundTime = 30,
    markList = {},
    
    tickActId = -1,
    roundActId = -1,
    
    infectList = {},
    minCount = 2,
    lastHunterId = -1,
    
    --fixed mount bug
    playerHooks = {},
    
    scoreInfo = {},
    --scoreType
    score_touch = 1,
    score_survival = 1,
    scoreType_touch = 1,
    scoreType_survival = 2,
    
    hostHookArrowSpeedMlp = 0.7,
    clientHookArrowSpeedMlp = 0.7,
    hunterArrowSpeedMlp = 1.1,
    breakHookBuffInfo = {},
    hookEffectList = {},
    characterSpeedMlp = 0.7,
    hunterSpeedMlp = 1,
    hostPlayerSpringMlp = 5,
    clientPlayerSpringMlp = 5,
    hunterPlayerSpringMlp = 1.1,
    
    arrowShotSpeed = 100,
    
    delayColorActIds = {},
    
    gazeShowDis = 50,
    
    infectColor = UE.Color(0.6, 0, 0.6, 0.3),
    
    crownPool = {},
    crownList = {},
    }

function SpiderTag:Awake()
    --self.weaponSpawner = self.weaponSpawnerLb.script:GetSelf()
    --self.weaponSpawner.controller = self
    
    self.cacheMoveType = CL.SettingMgr.Instance.moveType
    
    self.OnSpawnNetworkIB = function(netId)
        if self.playerHooks[netId] ~= nil then
            self:ClientMountHook(netId, self.playerHooks[netId].playerId, self.playerHooks[netId].handIdx)
            self.playerHooks[netId] = nil
        end
    end
    
    SpiderTag.Instance = self
    CL.InteractCharacter.OnPlayerInitFinish("+", self.ClientLocalInit)
    
    
    self.isServer = CL.Network.VRNetworkManager.Instance.IsServer
    if CL.Network.VRNetworkManager.Instance.IsServer then
        CL.EventHub.ListenEvent("NetworkRoomPlayerJoin", self.PlayerJoinScene)
        CL.EventHub.ListenEvent("NetworkRoomPlayerLeft", self.RoomPlayerLeft)
        SpiderTag.PlayerJoinScene()
        self.ClientLocalInit()
    else
        if not IsNullOrDestroyed(CL.InteractCharacter.PlayerInstance) then
            self.ClientLocalInit()
        end
        
        CL.Network.NetworkSpawnMgr.Instance:OnSpawnNetworkIB("+", self.OnSpawnNetworkIB)
    end
    
    self.OnHookUnSlot = function(slot, isMount)
        if not isMount then
            slot.mountedItem:SlotEvent("-", self.OnHookUnSlot)
            if self.hookEffectList[slot.mountedItem] then
                slot.mountedItem:RemoveEnchantEffect(self.hookEffectList[slot.mountedItem])
                self.hookEffectList[slot.mountedItem] = nil
            end
        end
    end
end

function SpiderTag:OnDestroy()
    CL.InteractCharacter.OnPlayerInitFinish("-", self.ClientLocalInit)
    
    if self.isServer then
        CL.EventHub.RemoveListener("NetworkRoomPlayerJoin", self.PlayerJoinScene)
        CL.EventHub.RemoveListener("NetworkRoomPlayerLeft", self.RoomPlayerLeft)
    else
        if CL.Network.NetworkSpawnMgr.Instance then
            CL.Network.NetworkSpawnMgr.Instance:OnSpawnNetworkIB("-", self.OnSpawnNetworkIB)
        end
    end
    
    self:LockHpMp(false)
    self:LockMovement(false)
    self:RemoveStateHUD()
    self:RemoveTriggerToPlayer()
    self:ClearHunter()
    self:GiveBackCrown()
    SpiderTag.Instance = nil
end

function SpiderTag:NetworkInject()
    self.host:InjectFunc("ServerSetHook", self.ServerSetHook)
    --self.host:InjectFunc("RpcOnSpawnHook", self.RpcOnSpawnHook)
    self.host:InjectFunc("RefleshCountdown", self.RefleshCountdown)
    self.host:InjectFunc("RpcShowTips", self.RpcShowTips)
    self.host:InjectFunc("CmdServerHookInfo", self.CmdServerHookInfo)
    self.host:InjectFunc("RpcClientHookInfo", self.RpcClientHookInfo)
    self.host:InjectFunc("CmdServerSetTriggerToPlayer", self.CmdServerSetTriggerToPlayer)
    self.host:InjectFunc("RpcPlayInfectEffect", self.RpcPlayInfectEffect)
    self.host:InjectFunc("RpcSetHunter", self.RpcSetHunter)
    self.host:InjectFunc("ClearHunter", self.ClearHunter)    
    self.host:InjectFunc("CmdServerHunterInfo", self.CmdServerHunterInfo)
    self.host:InjectFunc("RpcClientHunterInfo", self.RpcClientHunterInfo)
    self.host:InjectFunc("RoundEnd", self.RoundEnd)
    self.host:InjectFunc("NetworkStartRound", self.NetworkStartRound)
    self.host:InjectFunc("RoundFinish", self.RoundFinish)
    self.host:InjectFunc("ReqestUpdateScoreInfo", self.ReqestUpdateScoreInfo)
    self.host:InjectFunc("RpcUpdateScoreInfo", self.RpcUpdateScoreInfo)
    self.host:InjectFunc("RpcSettlement", self.RpcSettlement)
    self.host:InjectFunc("RpcScoring", self.RpcScoring)
    self.host:InjectFunc("PlayCountdown", self.PlayCountdown)
    self.host:InjectFunc("StopCountdown", self.StopCountdown)
    self.host:InjectFunc("PlayStartBellSound", self.PlayStartBellSound)    
    self.host:InjectFunc("PlayBellSound", self.PlayBellSound)    
    self.host:InjectFunc("ClientOnBreakHook", self.ClientOnBreakHook)
    self.host:InjectFunc("CmdHunterTriggerPlayer", self.CmdHunterTriggerPlayer)
    self.host:InjectFunc("PlayBreakHookEffect", self.PlayBreakHookEffect)


end

function SpiderTag:ServerPlayerInit(playerId)
    self:SetTriggerToPlayer(playerId)
    self:ServerSetHook(playerId)
    self.setupPlayers[playerId] = true
end

function SpiderTag.ClientLocalInit()
    if SpiderTag.Instance.isInitLocal then
        return
    end
    SpiderTag.Instance.isInitLocal = true
    SpiderTag.Instance:SpawnStateHUD()
    SpiderTag.Instance:LockHpMp(true)
    SpiderTag.Instance:LockMovement(true)
    
    if not CL.Network.VRNetworkManager.ServerOnline then
        SpiderTag.Instance:SetTriggerToPlayer(CL.InteractCharacter.PlayerInstance.networkPlayer.netId)
        
        SpiderTag.Instance:ClientCmdHookInfo()
        SpiderTag.Instance:CommandScoreInfo()
        SpiderTag.Instance:ClientCmdHunterInfo()
    end
end

function SpiderTag.PlayerJoinScene()
    local roomPlayers = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    for i = 0, roomPlayers.Count - 1 do
        if not SpiderTag.Instance.setupPlayers[roomPlayers[i].netId] then
            SpiderTag.Instance:ServerPlayerInit(roomPlayers[i].netId)
        end
    end
    
    local count = roomPlayers.Count
    
    if not SpiderTag.Instance.isStart then
        if count >= SpiderTag.Instance.minCount then
            SpiderTag.Instance:TickToStart()
        end
    end
    
    SpiderTag.Instance:ScoreInfoAddPlayer()
    SpiderTag.Instance:RefleshScore()
end

function SpiderTag.RoomPlayerLeft()
    local roomPlayers = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    local isExist = false
    for k, v in pairs(SpiderTag.Instance.setupPlayers) do
        for i = 0, roomPlayers.Count - 1 do
            if roomPlayers[i].netId == k then
                isExist = true
                break
            end
        end
        
        if not isExist then
            SpiderTag.Instance.setupPlayers[k] = nil
        end
    end
    
    local count = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers.Count
    if SpiderTag.Instance.isStart then
        if count < SpiderTag.Instance.minCount then
            SpiderTag.Instance:StopGame()
        end
    end
    SpiderTag.Instance:ScoreInfoRemovePlayer()
end

function SpiderTag:LockHpMp(flag)
    CL.PlayerCombatAttr.LockHp = flag
    CL.PlayerCombatAttr.LockMp = flag
    
    if CL.Network.VRNetworkManager.ServerOnline then
        CL.Network.NetworkRoomMgr.Instance:ServerUpdateRoomCheating(flag, 
            flag, nil, nil, nil, nil, nil)
    end
end

function SpiderTag:LockMovement(flag)
    --CL.InteractCharacter.PlayerInstance.move.simulatorRunCoe = flag and 0 or 0.05
    --CL.InteractCharacter.PlayerInstance.move:SetSpeedMlp(flag and 0 or 1)
    --
    --if flag then
    --    CL.SettingMgr.Instance.moveType = CL.SettingMgr.MoveType.NoSwing
    --else
    --    CL.SettingMgr.Instance.moveType = self.cacheMoveType
    --end
    if flag then
        local speedMlp = self.characterSpeedMlp
        self.lockMovementId = CL.Scheduler.Create(self.trans,
            function(sche, t, s)
                speedMlp = self.infectList[CL.InteractCharacter.PlayerInstance.networkPlayer.netId] and
                    self.hunterSpeedMlp or self.characterSpeedMlp
                CL.SettingMgr.Instance.moveType = CL.SettingMgr.MoveType.NoSwing
                CL.InteractCharacter.PlayerInstance.move:SetMoveSpeed(CL.SettingMgr.MoveType.NoSwing)
                CL.InteractCharacter.PlayerInstance.move:SetSpeedMlp(speedMlp)
                CL.InteractCharacter.PlayerInstance.move.simulatorRunCoe = 0
            end
        , 0.5, -1).actionId
    else
        CL.Scheduler.RemoveSchedule(self.lockMovementId)
        CL.InteractCharacter.PlayerInstance.move.simulatorRunCoe = 0.05
        CL.InteractCharacter.PlayerInstance.move:SetSpeedMlp(1)
        CL.SettingMgr.Instance.moveType = self.cacheMoveType
        CL.InteractCharacter.PlayerInstance.move:SetMoveSpeed(self.cacheMoveType)
    end
end

--function SpiderTag:SetHook()
--    if CL.Network.VRNetworkManager.IsOnline then
--        local playerId = CL.InteractCharacter.PlayerInstance.networkPlayer.netId
--        if CL.Network.VRNetworkManager.Instance.IsServer then
--            self:ServerSetHook(playerId)
--        else
--            self:ClientCmdSetHook(playerId)
--        end
--    end
--end

function SpiderTag:ServerSetHook(playerId)
    local player = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(playerId).interactCharacter
    CL.Network.NetworkSpawnMgr.Instance:NetworkSpawnIB("Spell_HookArmguard", 
        UE.Vector3.zero, UE.Quaternion.identity,
        false, false, 0, true, 
        function(netIb, go)
            if IsNullOrDestroyed(go) then
                return
            end
            local ib = netIb.ib
            if IsNullOrDestroyed(ib) then
                return
            end
            
            player.hands[CL.RagdollBoneInfo.LEFT_HAND].triggerSlots[0]:DoMount(ib)
            player.networkPlayer.networkInteractHand:OnDoMountServer(true, ib.netId, 0)
            
            
            self:SettingHook(ib, CL.InteractCharacter.PlayerInstance.networkPlayer.netId == playerId)
            
            --local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
            --local id_list = list_int()
            --id_list:Add(ib.netId)
            --id_list:Add(playerId)
            --id_list:Add(CL.RagdollBoneInfo.LEFT_HAND)
            --self.host:ServerRpcIntListFunc("RpcOnSpawnHook", id_list)
            
            --self:ServerRpcHookInfo()
            if not self.playerHooks[ib.netId] then
                self.playerHooks[ib.netId] = {}
            end
            self.playerHooks[ib.netId].playerId = playerId
            self.playerHooks[ib.netId].handIdx = CL.RagdollBoneInfo.LEFT_HAND
        end)
    
    CL.Network.NetworkSpawnMgr.Instance:NetworkSpawnIB("Spell_HookArmguard", 
        UE.Vector3.zero, UE.Quaternion.identity,
        false, false, 0, true, 
        function(netIb, go)
            if IsNullOrDestroyed(go) then
                return
            end
            local ib = netIb.ib
            if IsNullOrDestroyed(ib) then
                return
            end
            
            player.hands[CL.RagdollBoneInfo.RIGHT_HAND].triggerSlots[0]:DoMount(ib)
            player.networkPlayer.networkInteractHand:OnDoMountServer(false, ib.netId, 1)
            
            self:SettingHook(ib, CL.InteractCharacter.PlayerInstance.networkPlayer.netId == playerId)
            
            --self:ServerRpcHookInfo()
            if not self.playerHooks[ib.netId] then
                self.playerHooks[ib.netId] = {}
            end
            self.playerHooks[ib.netId].playerId = playerId
            self.playerHooks[ib.netId].handIdx = CL.RagdollBoneInfo.RIGHT_HAND
        end)
    
end

function SpiderTag:SettingHook(ib, isServerLocal)
    local trigger = ib:GetInteractTrigger()
    if not IsNullOrDestroyed(trigger) and trigger.script then
        local tb = trigger.script:GetSelf()
        tb.shootSpeed = self.arrowShotSpeed * (isServerLocal and self.hostHookArrowSpeedMlp 
            or self.clientHookArrowSpeedMlp)
        tb.massToDrivePlayerSpringMlp = (isServerLocal and self.hostPlayerSpringMlp
            or self.clientPlayerSpringMlp)
        table.insert(tb.onArrowCollisionList, self)
    end
end

--function SpiderTag:ClientCmdSetHook(playerId)
--    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
--    local id_list = list_int()
--    id_list:Add(playerId)
--    self.host:CommandFunc("CmdServerSetHook")
--end

function SpiderTag:ClientCmdHookInfo()
    self.host:CommandFunc("CmdServerHookInfo")
    
end

function SpiderTag:CmdServerHookInfo()
    self:ServerRpcHookInfo()
end

function SpiderTag:ServerRpcHookInfo()
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    for k, v in pairs(self.playerHooks) do
        id_list:Add(k)
        id_list:Add(v.playerId)
        id_list:Add(v.handIdx)
    end
    self.host:ServerRpcIntListFunc("RpcClientHookInfo", id_list)
end

function SpiderTag:RpcClientHookInfo(intList)
    local count = 0
    for i = 0, intList.Count - 1 do
        if count == 3 then
            count = 0
        end
        
        if count == 0 then
            if not self.playerHooks[intList[i]] then
                self.playerHooks[intList[i]] = {}
            end
        end
        if count == 1 then
            self.playerHooks[intList[i - 1]].playerId = intList[i]
        end
        if count == 2 then
            self.playerHooks[intList[i - 2]].handIdx = intList[i]
        end
        count = count + 1
    end
    
    for k, v in pairs(self.playerHooks) do
        self:ClientMountHook(k, v.playerId, v.handIdx)
    end
end
--function SpiderTag:CmdServerSetHook(boolList, floatList, intList, strList)
--    self:ServerSetHook(intList[0])
--end
--
--function SpiderTag:RpcOnSpawnHook(intList)
--    if not self.playerHooks[intList[0]] then
--        self.playerHooks[intList[0]] = {}
--    end
--    self.playerHooks[intList[0]].playerId = intList[1]
--    self.playerHooks[intList[0]].handIdx = intList[2]
--end

function SpiderTag:ClientMountHook(netId, playerId, handIdx)
    local netIb = CL.Network.NetworkSpawnMgr.Instance:GetNetworkIB(netId)
    if IsNullOrDestroyed(netIb) then
        return
    end
    
    local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(playerId)
    if IsNullOrDestroyed(networkPlayer) then
        return
    end
    if not IsNullOrDestroyed(networkPlayer.slotTriggers[handIdx].mountItem) then
        return
    end
    
    self:SettingHook(netIb.ib, false)
    
    netIb.ib:OnSlot(networkPlayer.interactCharacter.hands[handIdx].triggerSlots[0])
end

--function SpiderTag:ClientCmdSetHook(playerId)
--    self.host:CommandIntFunc("CmdServerSetHook", playerId)
--end
--
--function SpiderTag:CmdServerSetHook(value)
--    self:ServerSetHook(value)
--end

--Just need to set triggers for players in the server.
function SpiderTag:InitTriggerToPlayer()
    if CL.Network.VRNetworkManager.IsOnline then
        local playerId = CL.InteractCharacter.PlayerInstance.networkPlayer.netId
        if CL.Network.VRNetworkManager.Instance.IsServer then
            self:SetTriggerToPlayer(playerId)
        else
            self:ClientCmdSetTriggerToPlayer(playerId)
        end
    end
end

function SpiderTag:RemoveTriggerToPlayer()
    for k, v in ipairs(self.trigList) do
        if v and not IsNullOrDestroyed(v.trans) then
            UE.Object.DestroyImmediate(v.trans.gameObject)
        end
    end
    self.trigList = {}
end

function SpiderTag:SetTriggerToPlayer(playerId)
    local player = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(playerId).interactCharacter
    
    local trigGo = UE.GameObject.Instantiate(CL.Network.VRNetworkManager.ServerOnline and self.handTriggerPrefab or self.clientHandTriggerPrefab)
    trigGo:SetActive(true)
    
    local trigLeft = trigGo:GetComponent(typeof(CL.LuaBehaviour)).script:GetSelf()
    trigLeft:Init(self, player.hands[CL.RagdollBoneInfo.LEFT_HAND])
    table.insert(self.trigList, trigLeft)
    
    trigGo = UE.GameObject.Instantiate(CL.Network.VRNetworkManager.ServerOnline and self.handTriggerPrefab or self.clientHandTriggerPrefab)
    trigGo:SetActive(true)
    
    local trigRight = trigGo:GetComponent(typeof(CL.LuaBehaviour)).script:GetSelf()
    trigRight:Init(self, player.hands[CL.RagdollBoneInfo.RIGHT_HAND])
    table.insert(self.trigList, trigRight)
end

function SpiderTag:ClientCmdSetTriggerToPlayer(playerId)
    self.host:CommandIntFunc("CmdServerSetTriggerToPlayer", playerId)
end

function SpiderTag:CmdServerSetTriggerToPlayer(value)
    self:SetTriggerToPlayer(value)
end

-----------------------------------------------GameLogic---------------------------------------------------
function SpiderTag:TickToStart()
    if self.tickActId > 0 and self.isStart then
        return
    end
    
    self.tickActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            if t <= 1.1 then
                self.host:ServerRpcFunc("PlayCountdown", true)
            else
                self:ShowTips("Count down ".. math.abs(math.ceil(self.startCountdown - t)) .. " to start", 2)
            end
        end
    , 1, self.startCountdown + 1, 0.5)
    :SetOnStop(
        function()
            local count = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers.Count
            if count >= self.minCount then
                self:StartGame()
            end
        end
    ).actionId
end

function SpiderTag:StartGame()
    if self.isStart then
        return
    end
    
    self.isStart = true
    self.host:ServerRpcFunc("StopCountdown", true)

    self.roundActId = CL.Scheduler.RemoveSchedule(self.roundActId)
    self:StartRound()
end

function SpiderTag:TickToStartRound()
    self.tickRoundActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            if t <= 1.1 then
                self.host:ServerRpcFunc("PlayCountdown", true)
            else
                self:ShowTips("Count down ".. math.abs(math.ceil(self.startCountdown - t)) .. " to start new round", 2)
            end
        end
    , 1, self.startCountdown + 1)
    :SetOnStop(
        function()
            self.host:ServerRpcFunc("StopCountdown", true)
            
            if not self.isStart then
                return
            end
            
            local count = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers.Count
            if count >= self.minCount then
                self:StartRound()
            end
        end
    ).actionId
end

function SpiderTag:NetworkStartRound()
    self:ClearHunter()
    
    self:PlayStartBellSound()
    self.isStartRound = true
end

function SpiderTag:StartRound()
    self:RefleshCountdown("")
    
    self:PlayStartBellSound()
    --self.host:ServerRpcFunc("PlayStartBellSound", true)
    
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcFunc("NetworkStartRound")
    end
    
    self:ClearHunter()
    --random hunter
    self:RandomHunter()
    
    self:StartRandomSpawnProps()
    
    self.isStartRound = true
    
    self.roundActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            if self:IsInfectAll() then
                self:ShowTips("Infect all, nobody servival", 2)
                sche:Stop()
                self:RoundFinish()
                return
            end
            self:RefleshCountdown(math.abs(math.ceil(self.roundTime - t)))
            
            if self.roundTime - t < self.endCountdown then
                self:ShowTips("Count down ".. math.abs(math.ceil(self.roundTime - t)) .. " to end round", 1)
                self.host:ServerRpcFunc("PlayCountdown", true)
            end
            
            if t >= self.roundTime then
                self:RoundFinish()
            end
        end
    , 1, self.roundTime).actionId
end

function SpiderTag:PlayCountdown()
    if not self.cdSoundInfo then
        CL.AudioMgr.SetAsGlobalSoundOnce()
        self.cdSoundInfo = self.countdownSound:PlaySoundInfo()
    end
end

function SpiderTag:StopCountdown()
    if self.cdSoundInfo then
        CL.AudioMgr.Instance:GiveBackAndLerpToZero(self.cdSoundInfo)
    end
    self.cdSoundInfo = nil
end

function SpiderTag:PlayBellSound()
    CL.AudioMgr.SetAsGlobalSoundOnce()
    local info = self.bellSound:PlaySoundInfo()
end

function SpiderTag:PlayStartBellSound()
    CL.AudioMgr.SetAsGlobalSoundOnce()
    local info = self.startBellSound:PlaySoundInfo()
end

function SpiderTag:RoundFinish()
    self.host:ServerRpcFunc("PlayBellSound", true)
    
    self:SurvivalScoring()
    
    self:Settlement()
    
    self:RoundEnd()
    
    local count = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers.Count
    if count >= self.minCount then
        self:TickToStartRound()
    end
end

function SpiderTag:RoundEnd()
    self.isStartRound = false
    
    self:StopCountdown()

    self:RefleshCountdown("-")
    
    self:StopRandomSpawnProps()
    
    self:ResetGameData()
    
    self.tickActId = CL.Scheduler.RemoveSchedule(self.tickActId)
    self.roundActId = CL.Scheduler.RemoveSchedule(self.roundActId)
    self.tickRoundActId = CL.Scheduler.RemoveSchedule(self.tickRoundActId)
    
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcFunc("RoundEnd")
    end
end

function SpiderTag:PlayInfectEffect(collider, point)
    if CL.Network.VRNetworkManager.IsOnline then
        if CL.Network.VRNetworkManager.Instance.IsServer then
            local key, cid = CL.Network.NetworkColliderMgr.Instance:GetColliderKey(collider)
            local localPoint = cid ~= 0 and collider.transform:InverseTransformPoint(point) or point
             
            local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
            local list = list_int()
            list:Add(key)
            list:Add(cid)
            list:Add(localPoint.x)
            list:Add(localPoint.y)
            list:Add(localPoint.z)
            self.host:ServerRpcIntListFunc("RpcPlayInfectEffect", list)
            CL.EffectMgr.Instance:PlayEffect(self.infectEffectName, point, UE.Quaternion.identity)
        end
    end
end

function SpiderTag:RpcPlayInfectEffect(intList)
    local col = CL.Network.NetworkColliderMgr.Instance:GetCollider(intList[1], intList[0])
    local point = UE.Vector3(intList[2], intList[3], intList[4])
    if IsNullOrDestroyed(col) then
        CL.EffectMgr.Instance:PlayEffect(self.infectEffectName, point, UE.Quaternion.identity)
        return
    end
    local worldPoint = col.transform:TransformPoint(UE.Vector3(intList[2], intList[3], intList[4]))
    CL.EffectMgr.Instance:PlayEffect(self.infectEffectName, worldPoint, UE.Quaternion.identity)
end

function SpiderTag:RandomHunter()
    local count = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers.Count
    local random = math.random(0, count - 1)
    
    local networkRoomPlayer = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers[random]
    local netId = networkRoomPlayer.netId
    if self.lastHunterId == netId and count >= 2 then
        random = (random + 1) % count
        networkRoomPlayer = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers[random]
        netId = networkRoomPlayer.netId
        
    end
    self.lastHunterId = netId
    
    self.hunterColor = networkRoomPlayer.colorId
    self:ServerSetHunter(netId, self.hunterColor)
end

function SpiderTag:ServerSetHunter(netId, hunterColor)
    self:SetHunter(netId, hunterColor)
    
    if CL.Network.VRNetworkManager.ServerOnline then
        local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
        local id_list = list_int()
        --id_list:Add(player.networkPlayer.netId)
        id_list:Add(netId)
        id_list:Add(hunterColor)
        self.host:ServerRpcIntListFunc("RpcSetHunter", id_list)
    end
end

function SpiderTag:RpcSetHunter(intList)
    self:SetHunter(intList[0], intList[1])
end

function SpiderTag:SetHunter(netId, colorIdx, delay)
    if self.infectList[netId] then
        return
    end
    
    local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(netId)
    if IsNullOrDestroyed(networkPlayer) then
        return
    end
    
    local player = networkPlayer.interactCharacter
    local headset = player:GetHeadset()
    local headTrans = player.ik.references.head
    local eo =  CL.EffectMgr.Instance:PlayEffect(self.hunterMarkName, headTrans.position, headTrans.rotation)
    eo.trans:SetParent(headTrans)
    eo.trans.localPosition = UE.Vector3.zero
    eo.trans.localRotation = UE.Quaternion.identity
    table.insert(self.markList, eo)

    --left hand
    local handLTrans = player.ik.references.leftHand
    local handEo_l =  CL.EffectMgr.Instance:PlayEffect(self.hunterHandEffect, handLTrans.position, handLTrans.rotation)
    handEo_l.trans:SetParent(handLTrans)
    handEo_l.trans.localPosition = UE.Vector3.zero
    handEo_l.trans.localRotation = UE.Quaternion.identity
    table.insert(self.markList, handEo_l)
    
    --right hand
    local handRTrans = player.ik.references.rightHand
    local handEo_r =  CL.EffectMgr.Instance:PlayEffect(self.hunterHandEffect, handRTrans.position, handRTrans.rotation)
    handEo_r.trans:SetParent(handRTrans)
    handEo_r.trans.localPosition = UE.Vector3.zero
    handEo_r.trans.localRotation = UE.Quaternion.identity
    table.insert(self.markList, handEo_r)
    
    self.infectList[player.networkPlayer.netId] = player
    
    self:ChangeHelmetEmission(player, UE.Color.red, delay)
    
    player:ChangeCloakColor(colorIdx)
    if player.networkPlayer.networkPlayerState.hudTMState then
        player.networkPlayer.networkPlayerState.hudTMState.playerName.color = UE.Color.red
    end
    if networkPlayer == CL.InteractCharacter.PlayerInstance.networkPlayer then
        self.hudState:SetType(true)
    end
    
    local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    local localPlayerId = CL.InteractCharacter.PlayerInstance.networkPlayer.netId
    local gaze = nil
    for i = 0, players.Count - 1 do
        local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(players[i].netId)
        if not IsNullOrDestroyed(networkPlayer) then
            if networkPlayer ~= CL.InteractCharacter.PlayerInstance.networkPlayer then
                local gaze = networkPlayer.interactCharacter.gaze
                if self.infectList[localPlayerId] then
                    if self.infectList[networkPlayer.netId] then
                        gaze:UpdateGazeType(CL.GazeMgr.GazeType.FriendGaze)
                    else
                        gaze:UpdateGazeType(CL.GazeMgr.GazeType.DangerGaze)
                    end
                else
                    if self.infectList[networkPlayer.netId] then
                        gaze:UpdateGazeType(CL.GazeMgr.GazeType.DangerGaze)
                    else
                        gaze:UpdateGazeType(CL.GazeMgr.GazeType.FriendGaze)
                    end
                end
                local info = gaze:GetGazeInfo()
                info.showDis = self.gazeShowDis
                gaze:ShowGazeInfo()
            end
        end
    end
    
    if networkPlayer == CL.InteractCharacter.PlayerInstance.networkPlayer then
        CL.PostProcessControl.LerpColorToAndBackWithPriority(self.infectColor, 0.5, CL.PostProcessControl.Priority.Front)
    end
    
    self:UpdateHunterHook(true, player)
end

function SpiderTag:UpdateHunterHook(isHunter, character)
    for k, v in pairs(self.playerHooks) do
        if v.playerId == character.networkPlayer.netId then
            local netIb = CL.Network.NetworkSpawnMgr.Instance:GetNetworkIB(k)
            if not IsNullOrDestroyed(netIb) then
                local trigger = netIb.ib:GetInteractTrigger()
                if not IsNullOrDestroyed(trigger) and trigger.script then
                    local tb = trigger.script:GetSelf()
                    tb.shootSpeed = self.arrowShotSpeed * (character.IsLocalPlayer and self.hostHookArrowSpeedMlp 
                        or self.clientHookArrowSpeedMlp)
                        * (isHunter and self.hunterArrowSpeedMlp or 1)
                    tb.massToDrivePlayerSpringMlp = (character.IsLocalPlayer and self.hostPlayerSpringMlp
                        or self.clientPlayerSpringMlp) 
                        * (isHunter and self.hunterPlayerSpringMlp or 1)
                end
                
                --if isHunter then
                --    if not self.hookEffectList[netIb.ib] then
                --        self:AddBreakHookBuff(character, 1)
                --    end
                --else
                --    self:AddBreakHookBuff(character, 0)
                --end
            end
        end
    end
end

function SpiderTag:ChangeHelmetEmission(player, color, delay)
    local time = delay and 0.5 or 0.1
    self.delayColorActIds[player] = CL.Scheduler.RemoveSchedule(self.delayColorActIds[player])
    self.delayColorActIds[player] = CL.Scheduler.Create(player,
        function(sche, t, s)
            player:ChangeHelmetEmission(color)
        end
    , 0, 0, time).actionId
end

function SpiderTag:ClearHunter()
    for k, v in ipairs(self.markList) do
        if not IsNullOrDestroyed(v) then
            CL.EffectMgr.Instance:GiveBack(v)
        end
    end
    
    if not IsNullOrDestroyed(CL.Network.NetworkRoomMgr.Instance) then
        local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
        for i = 0, players.Count - 1 do
            local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(players[i].netId)
            if not IsNullOrDestroyed(networkPlayer) then
                self:ChangeHelmetEmission(networkPlayer.interactCharacter, UE.Color.white, false)
                networkPlayer.interactCharacter:ChangeCloakColor(players[i].colorId)
                if networkPlayer.networkPlayerState.hudTMState and 
                    not IsNullOrDestroyed(networkPlayer.networkPlayerState.hudTMState.playerName) then
                    networkPlayer.networkPlayerState.hudTMState.playerName.color = UE.Color.white
                end
                
                self:UpdateHunterHook(false, networkPlayer.interactCharacter)
            end
        end
    end
    
    if self.hudState then
        self.hudState:SetType(false)
    end
end



function SpiderTag:ClientCmdHunterInfo()
    self.host:CommandFunc("CmdServerHunterInfo")
end

function SpiderTag:CmdServerHunterInfo()
    self:ServerRpcHunterInfo()
end

function SpiderTag:ServerRpcHunterInfo()
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    id_list:Add(self.hunterColor)
    for k, v in pairs(self.infectList) do
        id_list:Add(k)
    end
    self.host:ServerRpcIntListFunc("RpcClientHunterInfo", id_list)
end

function SpiderTag:RpcClientHunterInfo(intList)
    self.hunterColor = intList[0]
    for i = 1, intList.Count - 1 do
        self:SetHunter(intList[i], self.hunterColor, true)
    end
end



function SpiderTag:StopGame()
    if self.isStart then
        self.isStart = false
    end
    self:RoundEnd()
end

function SpiderTag:ResetGameData()
    self.infectList = {}
end

function SpiderTag:IsInfectAll()
    local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    for i = 0, players.Count - 1 do
        if not self.infectList[players[i].netId] then
            return false
        end
    end
    return true
end

function SpiderTag:IsPlayerInfect(playerId)
    return self.infectList[playerId] ~= nil
end

function SpiderTag:CommandScoreInfo()
    self.host:CommandFunc("ReqestUpdateScoreInfo")
end

function SpiderTag:ReqestUpdateScoreInfo()
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    local count = 0
    for k, v in pairs(self.scoreInfo) do
        id_list:Add(k)
        id_list:Add(v.score)
        id_list:Add(v.touch)
        id_list:Add(v.survival)
        count = count + 1
    end
    

    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcIntListFunc("RpcUpdateScoreInfo", id_list)
    end
end

function SpiderTag:RpcUpdateScoreInfo(list)
    self.scoreInfo = {}
    local count = 0
    local lastNetId = 0
    for i = 0, list.Count - 1 do
        count = i % 4
        
        if count == 0 then
            if not self.scoreInfo[list[i]] then
                self:ScoreInfoAddPlayerById(list[i])
            end
            lastNetId = list[i]
        elseif count == 1 then
            self.scoreInfo[lastNetId].score = list[i]
        elseif count == 2 then
            self.scoreInfo[lastNetId].touch = list[i]
        elseif count == 3 then
            self.scoreInfo[lastNetId].survival = list[i]
        end
    end
    self:RefleshScore()
    
    self:SetChampions()
end

function SpiderTag:RefleshScore()
    local str = ""
    local sortList = {}
    local isMax = false
    for k, v in pairs(self.scoreInfo) do
        if not v.name or CS.System.String.IsNullOrEmpty(v.name) then
            local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
            for i = 0, players.Count - 1 do
                if players[i].netId == k then
                    v.name = players[i].PlayerName
                    break
                end
            end
        end
        v.id = k
        
        isMax = false
        if #sortList == 0 then
            table.insert(sortList, v)
        else
            for m, n in ipairs(sortList) do
                if v.score > n.score then
                    table.insert(sortList, m, v)
                    isMax = true
                    break
                elseif v.score == n.score then
                    if v.touch > n.touch then
                        table.insert(sortList, m, v)
                        isMax = true
                        break
                    elseif v.touch == n.touch then
                        if v.survival > n.survival then
                            table.insert(sortList, m, v)
                            isMax = true
                            break
                        end
                    end
                end
            end
            
            if not isMax then
                table.insert(sortList, #sortList + 1, v)
            end
        end
    end
    
    --If all players have the same score then there is no winner
    self.champions = {}
    local maxScoreInfo = sortList[1]
    for k, v in ipairs(sortList) do
        if v.score == maxScoreInfo.score and v.touch == maxScoreInfo.touch and v.survival == maxScoreInfo.survival and v.score > 0 then
            table.insert(self.champions, v.id)
        end
    end
    
    if #self.champions >= #sortList then
        self.champions = {}
    end
    
    local isChampion = false
    for k, v in ipairs(sortList) do
        isChampion = false
        for m, n in ipairs(self.champions) do
            if n == v.id then
                isChampion = true
                break
            end
        end
        if isChampion then
            str = str .. "<color=yellow><b>"..(v.name and v.name or k) .. "  touch: " .. v.touch .. "  survival: " .. v.survival .. "  score: " .. v.score .. " </b></color>\n "
        else
            str = str .."<alpha=#95>" ..(v.name and v.name or k) .. "  touch: " .. v.touch .. "  survival: " .. v.survival .. "  score: " .. v.score  .. "\n "
        end
    end
    
    self.text.text = str 
end

function SpiderTag:Settlement() 
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    for k, v in pairs(self.scoreInfo) do
        id_list:Add(k)
        id_list:Add(v.score)
        id_list:Add(v.touch)
        id_list:Add(v.survival)
    end
    
    self:SetChampions()
    
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcIntListFunc("RpcSettlement", id_list)
    end
end

function SpiderTag:RpcSettlement(list)
    --local str = ""
    --for i = 0, list.Count - 1 do
    --    str = str ..  "id: " .. list[i] .. " score: " 
    --        .. list[i + 1] .. " touch: " .. list[i + 2] .. " survival: " .. list[i + 3] .. " \n "
    --end
    
    
    self:SetChampions()
end

function SpiderTag:SetChampions()
    if not self.champions then
        return
    end
    
    self:GiveBackCrown()
    if self.hudState then
        self.hudState:SetChampion(false)
    end

    for k, v in ipairs(self.champions) do
        if self.hudState and v == CL.InteractCharacter.PlayerInstance.networkPlayer.netId then
            self.hudState:SetChampion(true)
        end
        
        local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(v)
        if not IsNullOrDestroyed(networkPlayer) then
            local headTrans = networkPlayer.interactCharacter.ik.references.head
            local crown = self:GetCrown()
            crown:SetActive(true)
            crown.transform:SetParent(headTrans)
            crown.transform.localPosition = UE.Vector3.zero
            crown.transform.localRotation = UE.Quaternion.identity
        end
    end
end

function SpiderTag:GiveBackCrown()
    for k, v in ipairs(self.crownList) do
        if not IsNullOrDestroyed(v) then
            v:SetActive(false)
            v.transform:SetParent(self.crownPrefab.transform.parent)
            table.insert(self.crownPool, v)
        end
    end
    self.crownList = {}
end

function SpiderTag:GetCrown()
    --crownPrefab
    local crown = nil
    if #self.crownPool > 0 then
        for i = #self.crownPool, 1, -1 do
            if not IsNullOrDestroyed(self.crownPool[i]) then
                crown = self.crownPool[i]
                table.remove(self.crownPool, i)
                table.insert(self.crownList, crown)
                return crown
            else
                table.remove(self.crownPool, i)
            end
        end
    end
    
    crown = UE.GameObject.Instantiate(self.crownPrefab)
    table.insert(self.crownList, crown)
    return crown
end

function SpiderTag:ScoreInfoAddPlayer()
    local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    for i = 0, players.Count - 1 do
        self:ScoreInfoAddPlayerById(players[i].netId)
    end
end

function SpiderTag:ScoreInfoAddPlayerById(netId)
    if not self.scoreInfo[netId] then
        self.scoreInfo[netId] = {}
        self.scoreInfo[netId].touch = 0
        self.scoreInfo[netId].survival = 0
        self.scoreInfo[netId].score = 0
    end
end

function SpiderTag:ScoreInfoRemovePlayer()
    local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    local isExist = false
    for k, v in pairs(self.scoreInfo) do
        isExist = false
        for i = 0, players.Count - 1 do
            if players[i].netId == k then
                isExist = true
                break
            end
        end
        if not isExist then
            self.scoreInfo[k] = nil
        end
    end
end

function SpiderTag:SurvivalScoring()
    local players = CL.Network.NetworkRoomMgr.Instance.RoomInfo.roomPlayers
    for i = 0, players.Count - 1 do
        if not self:IsPlayerInfect(players[i].netId) then
            self:Scoring(players[i].netId, self.scoreType_survival)
        end
    end
end

function SpiderTag:Scoring(netId, scoreType)
    if not self.scoreInfo[netId] then
        self:ScoreInfoAddPlayerById(netId)
    end
    
    if scoreType == self.scoreType_touch then
        self.scoreInfo[netId].touch = self.scoreInfo[netId].touch + 1
        self.scoreInfo[netId].score = self.scoreInfo[netId].score + self.score_touch
    elseif scoreType == self.scoreType_survival then
        self.scoreInfo[netId].survival = self.scoreInfo[netId].survival + 1
        self.scoreInfo[netId].score = self.scoreInfo[netId].score + self.score_survival
    end
    
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    id_list:Add(netId)
    id_list:Add(self.scoreInfo[netId].touch)
    id_list:Add(self.scoreInfo[netId].survival)
    id_list:Add(self.scoreInfo[netId].score)
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcIntListFunc("RpcScoring", id_list)
    end
    
    self:RefleshScore()
end

function SpiderTag:RpcScoring(list)
    local netId = list[0]
    if not self.scoreInfo[netId] then
        self:ScoreInfoAddPlayerById(netId)
    end
    
    self.scoreInfo[netId].touch = list[1]
    self.scoreInfo[netId].survival = list[2]
    self.scoreInfo[netId].score = list[3]
    self:RefleshScore()
end

---------------------------------------------Trigger---------------------------------------------

function SpiderTag:HunterTriggerPlayer(hunter, player, collider, point)
    if not self.isStartRound then
        return
    end
    
    if not self:IsPlayerInfect(hunter.networkPlayer.netId) then
        return
    end
    
    if self:IsPlayerInfect(player.networkPlayer.netId) then
        return
    end
    
    if CL.Network.VRNetworkManager.ClientOnline then
        local key, cid = CL.Network.NetworkColliderMgr.Instance:GetColliderKey(collider)
        self:SendCmdHunterTriggerPlayer(hunter.networkPlayer.netId,
            player.networkPlayer.netId,
            cid, key, point)
        return
    end
    
    self:PlayInfectEffect(collider, point)
    self:ServerSetHunter(player.networkPlayer.netId, self.hunterColor)
    
    self:Scoring(hunter.networkPlayer.netId, self.scoreType_touch)
    
    local scoreInfo = self.scoreInfo[hunter.networkPlayer.netId]
    if scoreInfo then
        self:ShowTips("Player ".. (scoreInfo.name or hunter.networkPlayer.netId)  .. " get " .. self.score_touch .. " point", 2)
    end
end

function SpiderTag:SendCmdHunterTriggerPlayer(hunterId, playerId, cid, ckey, point)
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    id_list:Add(hunterId)
    id_list:Add(playerId)
    id_list:Add(cid)
    id_list:Add(ckey)
    id_list:Add(point.x)
    id_list:Add(point.y)
    id_list:Add(point.z)
    self.host:CommandIntListFunc("CmdHunterTriggerPlayer", id_list)
end

function SpiderTag:CmdHunterTriggerPlayer(list)
    local hunterPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(list[0])
    if IsNullOrDestroyed(hunterPlayer) then
        return
    end
    
    local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(list[1])
    if IsNullOrDestroyed(networkPlayer) then
        return
    end
    
    local col = CL.Network.NetworkColliderMgr.Instance:GetCollider(list[2], list[3])
    local point = UE.Vector3(list[4], list[5], list[6])
    
    self:HunterTriggerPlayer(hunterPlayer.interactCharacter, networkPlayer.interactCharacter, col, point)
end

---------------------------------------------StateHUD------------------------------------------
function SpiderTag:SpawnStateHUD()
    local go = CL.HUDMgr.Instance:CreateHud(self.statePanelName)
    if IsNullOrDestroyed(go) then
        return
    end
    self.hudState = go:GetComponent(typeof(CL.LuaBehaviour)):GetSelf()
end

function SpiderTag:RemoveStateHUD()
    CL.HUDMgr.Instance:RemoveUI(self.hudState)
    self.hudState = nil
end

function SpiderTag:RefleshCountdown(time)
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcIntFunc("RefleshCountdown", time)
    end
    if self.hudState then
        self.hudState:SetTime(time)
    end
end

function SpiderTag:ShowTips(str, time)
    if CL.Network.VRNetworkManager.ServerOnline then
        self.host:ServerRpcComplFunc("RpcShowTips", false, time, 0, str, UE.Vector3.zero, false)
    end
    CL.TextPanel.ShowTips(str, time, true)
end

function SpiderTag:RpcShowTips(bool, time, int, str, vec)
    CL.TextPanel.ShowTips(str, time, true)
end
---------------------------------------------Scene props----------------------------------------------

function SpiderTag:StartRandomSpawnProps()
    if not self.buffSpawner then
        self.buffSpawner = self.buffSpawnerState.script:GetSelf()
    end
    
    local nextSpawnTime = math.random(0, self.roundTime/self.propsFrequency)
    self.spawnPropActId = CL.Scheduler.RemoveSchedule(self.spawnPropActId)
    self.spawnPropActId = CL.Scheduler.Create(self.trans,
        function(sche, t, s)
            --self.weaponSpawner:SpawnIBAtRandomPos()
            self.buffSpawner:SpawnAtRandomPos()
            
            if self.isStartRound then
                self:StartRandomSpawnProps()
            end
        end
    , 0, 0, nextSpawnTime).actionId
end

function SpiderTag:StopRandomSpawnProps()
    self.spawnPropActId = CL.Scheduler.RemoveSchedule(self.spawnPropActId)
    --self.weaponSpawner:ClearUnGrabIB()
    if not self.buffSpawner then
        self.buffSpawner = self.buffSpawnerState.script:GetSelf()
    end
    self.buffSpawner:ClearBuff()
end

function SpiderTag:BreakPlayerHook(character)
    local leftHand = character.hands[CL.RagdollBoneInfo.LEFT_HAND]
    self:BreakHandHook(leftHand)
    
    local rightHand = character.hands[CL.RagdollBoneInfo.RIGHT_HAND]
    self:BreakHandHook(rightHand)
end

function SpiderTag:BreakHandHook(hand)
    if not hand:IsTriggerSlotEquiped() then
        return
    end
    
    local ib = hand.triggerSlots[0].mountedItem
    if IsNullOrDestroyed(ib) then
        return
    end
    
    local trigger = ib:GetInteractTrigger()
    if IsNullOrDestroyed(trigger) or not trigger.script then
        return
    end
    
    local tb = trigger.script:GetSelf()
    tb:BreakUntilGround()
end


--------------------------------------Break Hook-------------------------------------

function SpiderTag:OnArrowCollision(ib, collider, point, normal)
    if CL.Network.VRNetworkManager.ClientOnline then
        return
    end
    
    local pu = CL.PhysicsUnit.GetPhysicsUnitTopDown(collider)
    local ph = ib:GetSlotHand()
    if IsNullOrDestroyed(ph) then
        return
    end
    if IsNullOrDestroyed(pu) then
        return
    end
    
    if pu.unitType ~= CL.Tagger.Tag.PlayerRole then
        return
    end
    
    if ph.character == pu.character then
        return
    end
    
    if not self.breakHookBuffInfo[ph.character] then
        return
    end
    
    if self.breakHookBuffInfo[ph.character] <= 0 then
        return
    end
    
    self:BreakPlayerHook(pu.character)

    self.host:ServerRpcVec3Func("PlayBreakHookEffect", point, true)

    --hunter infinity
    --if not self.infectList[ph.character.networkPlayer.netId] then
        if self.breakHookBuffInfo[ph.character] then
            self.breakHookBuffInfo[ph.character] = 0
        else
            self.breakHookBuffInfo[ph.character] = self.breakHookBuffInfo[ph.character] - 1
        end
    --end
    
    
    local list_int = CS.System.Collections.Generic.List(CS.System.Int32)
    local id_list = list_int()
    id_list:Add(ph.character.networkPlayer.netId)
    id_list:Add(self.breakHookBuffInfo[ph.character])
    self.host:ServerRpcIntListFunc("ClientOnBreakHook", id_list)
    self:ShowBreakHookBuffState(ph.character)
end

function SpiderTag:PlayBreakHookEffect(pos)
    CL.EffectMgr.Instance:PlayEffect("GrapplingHook_break", pos, UE.Quaternion.identity)
end

function SpiderTag:ClientOnBreakHook(id_list)
    local networkPlayer = CL.Network.NetworkRoomMgr.Instance:GetNetworkPlayer(id_list[0])
    if IsNullOrDestroyed(networkPlayer) then
        return
    end
    self.breakHookBuffInfo[networkPlayer.interactCharacter] = id_list[1]
    
    self:ShowBreakHookBuffState(networkPlayer.interactCharacter)
end

function SpiderTag:AddBreakHookBuff(character, count)
    if not self.breakHookBuffInfo[character] then
        self.breakHookBuffInfo[character] = 0
    end
    
    self.breakHookBuffInfo[character] = count
    
    self:ShowBreakHookBuffState(character)
end

function SpiderTag:ShowBreakHookBuffState(character)
    if not self.breakHookBuffInfo[character] then
        return
    end
    local isShow = self.breakHookBuffInfo[character] and self.breakHookBuffInfo[character] > 0
    
    --change hook color
    for i = 0, character.hands.Length - 1 do
        if character.hands[i]:IsTriggerSlotEquiped() then
            local ib = character.hands[i].triggerSlots[0].mountedItem
            if string.find(ib.trans.name, "Spell_HookArmguard") then
                if isShow then
                    if self.hookEffectList[ib] then
                        break
                    end
                    local effectList = ib:PlayEnchantEffect(self.buffBreakLoopEffect)
                    self.hookEffectList[ib] = effectList
                    ib:SlotEvent("+", self.OnHookUnSlot)
                else
                    if self.hookEffectList[ib] then
                        ib:RemoveEnchantEffect(self.hookEffectList[ib])
                        ib:SlotEvent("-", self.OnHookUnSlot)
                        self.hookEffectList[ib] = nil
                    end
                end
            end
        end
    end
end

return Class(nil, nil, SpiderTag)