local ctl = Require("WMD_SpiderTagScript")

local DaggerTag = {
    buffList = {},
    lifeTime = 30,
    lifeTimerId = -1,
}


function DaggerTag:Start()
    self:PlayHangingEffect()
end

function DaggerTag:PlayHangingEffect()
    self.hangingEo = CL.EffectMgr.Instance:PlayEffect(self.hangingEffectName, self.trans.position, self.trans.rotation)
    self.hangingEo.trans:SetParent(self.trans)
end

function DaggerTag:OnGrab(a, g)
    self.isGrab = g
    if g then
        if self.hangingEo then
            CL.EffectMgr.Instance:GiveBack(self.hangingEo)
            self.hangingEo = nil
        end
        self.character = a.attachedHand.character
        
        if self.controller then
            self.controller.weaponSpawner:OnGrabPendantIB(self.host.interact)
        end
        
        self:StartCountdown()
    end
end

function DaggerTag:StartCountdown()
    if self.lifeTimerId > 0 then
        return
    end
    
    self.lifeTimerId = CL.Scheduler.Create(self.host.interact,
        function(sche, t, s)
            if not self.isGrab then
                if self.host.interact:CheckGrounded(1) then
                    self:ResetHolder()
                    self:PlayHangingEffect()
                end
            end
            
            if t >= self.lifeTime then
                self.host.interact:CostDurability(self.host.interact.durailityMax)
            end
        end
    , 0, self.lifeTime).actionId
end

function DaggerTag:SetSceneController(controller)
    self.controller = controller
end

function DaggerTag:OnColliderEnter(collision)
    local pu = CL.PhysicsUnit.GetPhysicsUnitTopDown(collision.collider)
    local ph = self.host.interact:GetPrimaryHand()
    if not IsNullOrDestroyed(pu) then
        --if pu.unitType == CL.Tagger.Tag.InteractRole then
        --    self:ResetHolder()
        --elseif pu.unitType == CL.Tagger.Tag.Env or pu.unitType == CL.Tagger.Tag.EnvGround then
        --    self:ResetHolder() 
        --elseif pu.unitType == CL.Tagger.Tag.FlyObject then
        --    self:ResetHolder()
        --end
        if pu.unitType == CL.Tagger.Tag.PlayerRole or pu.unitType == CL.Tagger.Tag.PlayerHand then
            if self.character == pu.character then
                return
            end
            local ct = collision:GetContact(0)
            self:TagPlayer(self.character, pu.character, collision.collider, ct.point)
            self:BreakPlayerHook(pu.character)
        end
    end
end

function DaggerTag:ResetHolder()
    self.character = nil
end



function DaggerTag:TagPlayer(holder, tagCharcter, collider, point)
    if ctl then
        ctl.Instance:HunterTriggerPlayer(holder, tagCharcter, collider, point)
    end
end

function DaggerTag:BreakPlayerHook(character)
    if ctl then
        ctl.Instance:BreakPlayerHook(character)
    end
end

return Class(nil, nil, DaggerTag)