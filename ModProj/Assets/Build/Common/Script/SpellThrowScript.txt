
local spellThrowScript = {
    --flyObjName(string) = "FlyFireBallX"
}



--[[
function spellThrowScript:Awake()
    self.__base.Awake(self)
end
]]




 
function spellThrowScript:OnChargeBegin()
    self:SetHandPose(true)

    if self.isOnline and not CL.Network.VRNetworkManager.Instance.IsServer then
        return
    end
    
    if self.fo then
        print("error: Charge begin before release-------------------------------")
        self:ReleaseSpell()
    end
    
    --print("OnChargeBegin")
    local fo = self:SpawnSpellOnHand(self.flyObjName, self.createPoint)

    if self.host.interact:IsEnhance() and fo.script.self.EnhanceSpell then
        fo.script.self:EnhanceSpell()
    end
    fo.script.self:SetOwner(self)
    
    self:SetHandPose(true)
    -- you can access base function in this way:
end

function spellThrowScript:OnChargeReady()
    self:PrepareSpellOnHand()

    if self.isEnchantable >= 1 then
        self:StartDetectingEnchant(self.createPoint)
    end
    if self.isOnline and self.host.interact.networkIB.networkIBProperties:IsOwnerLocalPlayer() then
        CL.Scheduler.RemoveSchedule(self.localActId)
        self.localActId = CL.Scheduler.Create(self.trans, 
            function(sche, t, s)
                if not self.slotHand or IsNullOrDestroyed(self.slotHand) then
                    return
                end
                if self.slotHand.inputs[CL.VRTKInputButton.ButtonType.Trigger].PressUp then
                    self:OnChargeRelease(true)
                    sche:Stop()
                end
            end,
        0, -1).actionId
    end
end




function spellThrowScript:OnChargeCancel()
    self:ReleaseSpell()
    
    self:SetHandPose(false)
    

    if self.isEnchantable >= 1 then
        self:StopDetectingEnchant()
    end
    
    if self.isOnline and self.host.interact.networkIB.networkIBProperties:IsOwnerLocalPlayer() then
        CL.Scheduler.RemoveSchedule(self.localActId)
    end
end



 
function spellThrowScript:OnChargeRelease(isLocal)
    --throw
    self:SetHandPose(false)
    
    if self.isOnline and not self.host.interact.networkIB.networkIBProperties:IsOwnerLocalPlayer() then
        return
    end
    
    if self.isOnline and not isLocal then
        return
    end
    
    if self.isOnline then
        CL.Scheduler.RemoveSchedule(self.localActId)
    end
    
    --if self.isOnline and not CL.Network.VRNetworkManager.Instance.IsServer then
    --    return
    --end
    
    
    if not self:TryThrow() then
        --[[
        local hand = self:GetSpellHand()
        if not IsNullOrDestroyed(self.fo) and self.fo.trans.gameObject.activeSelf
        and not IsNullOrDestroyed(hand) then
            hand.character.attr:AddMp(self.host:GetLastManaCost())
        end
        ]]
        if self.isOnline then
            local hand = self:GetSpellHand()
            if hand then
                local cmd = hand.character.networkPlayer.networkPlayerCommand
                cmd:CmdUnitAction(self.host.interact.netId)
            end
        else
            self:ReleaseSpell()
        end
    end
    
    if not self.isOnline then
        self.fo = nil
    end
    
    if self.isEnchantable >= 1 then
        self:StopDetectingEnchant()
    end
end

--Handling triggers when charge on hand
function spellThrowScript:OnFoDestroyed(fo)
    if self.fo and self.fo.script.self == fo then
        if self.isOnline then
            if CL.Network.VRNetworkManager.Instance.IsServer then
                self.host.interact.networkIB.networkIBState:ServerCloseSkill()
                self.host:CloseSkill()
            else
                return
            end
        else
            self.host:CloseSkill()
        end
        self.fo = nil

        if self.isEnchantable >= 1 then
            self:StopDetectingEnchant()
        end
    end
end

return Class(Require("LuaScript/WMD_SpellBaseScript"), nil, spellThrowScript)