--luaBehaviour
local ArrowPuller = {
    pullFactor = 0,
    lastShootFactor = 0,
    shootFactorDeltaAcc = 0,
    
    onTrigger = false,
}

function ArrowPuller:Start()
    self.trans = self.host.transform
    self.bow = self.bowInteractTrigger.script.self
    
    self.lifeCricleId = CL.Scheduler.RemoveSchedule(self.lifeCricleId)
    self.lifeCricleId = CL.Scheduler.Create(self.ib.gameObject, 
        function(sche, t, s)
            self:Update()
            self:RefreshRope()
        end
    , 0.01, -1)
    :SetUpdateChannel(CL.Scheduler.UpdateChannel.FixedUpdate).actionId
end

function ArrowPuller:GetPullingHand()
    return self.usingHand
end

function ArrowPuller:OnTriggerEnter(other)
    if self.usingHand ~= nil or IsNullOrDestroyed(self.ib:GetPrimaryHand()) then
        return
    end
    local hand = CL.InteractHand.GetHandByCollider(other)
    if IsNullOrDestroyed(hand) or hand:IsCalling() then
        return
    end
    self.usingHand = hand
    self.triggerHand = hand
    

    if not IsNullOrDestroyed(self.ib) and self.ib.CreateHint then
        self.onTrigger = true
        if IsNullOrDestroyed(self.hintPoint) then
            self.hintPoint = self.ib:CreateHint(self.rope, UE.Vector3.zero)
        else
            self.ib:ShowHint(self.hintPoint)
        end
    end

    self.usingHand:Ban(true)
    hand:HapticPulse(hand.character.hitHapticCurve, 0.1, UE.Random.Range(0.25, 0.5))
end

function ArrowPuller:OnTriggerExit(other)
    if self.usingHand == nil or IsNullOrDestroyed(self.ib:GetPrimaryHand()) then
       return
    end
    
    local hand = CL.InteractHand.GetHandByCollider(other)
    if IsNullOrDestroyed(hand) or hand ~= self.usingHand then
        return
    end
    
    if not IsNullOrDestroyed(self.ib) and self.ib.HideHint then
        self.onTrigger = false
        self.ib:HideHint(self.hintPoint)
    end
    
    self.triggerHand = nil
    
    if self.isPulling then
        self.handLeaveWhilePulling = true
    else
        self:OnHandLeave()
    end
end

function ArrowPuller:OnDisable()
    if not IsNullOrDestroyed(self.usingHand) then
        self:OnHandLeave()
    end
end

function ArrowPuller:Update()
    if IsNullOrDestroyed(self.usingHand) then
        return
    end
    if not self.isPulling and self.handLeaveWhilePulling then
        self.handLeaveWhilePulling = false
        self:OnHandLeave()
        return
    end
    
    if not self.isPulling then
        if self.usingHand.inputs[CL.VRTKInputButton.ButtonType.Grip].PressDown or
    self.usingHand.inputs[CL.VRTKInputButton.ButtonType.Trigger].PressDown then
        
            if not IsNullOrDestroyed(self.ib) and self.ib.HideHint then
                if self.hintPoint.gameObject.activeSelf then
                    self.ib:HideHint(self.hintPoint)
                end
            end
            
            self:StartPull()
            self.bow:OnPut(self.attach)
            
        end
    else
        
        if (self.usingHand.inputs[CL.VRTKInputButton.ButtonType.Grip].IsPressed or
    self.usingHand.inputs[CL.VRTKInputButton.ButtonType.Trigger].IsPressed) then
            self:UpdatePull()
        else
            if not IsNullOrDestroyed(self.ib) and self.ib.CreateHint then
                if self.onTrigger then
                    if IsNullOrDestroyed(self.hintPoint) then
                        self.hintPoint = self.ib:CreateHint(self.rope, UE.Vector3.zero)
                    else
                        self.ib:ShowHint(self.hintPoint)
                    end
                end
            end
            
            if self.pullFactor > 0.5 then
                self:EndPull()
                
                if self.shootArrowSound then
                    self.shootArrowSound.soundInfo:Play(self.usingHand.trans.position)
                end
                
                self.bow:OnRelease(self.attach, self.pullFactor)
            else
                self:OnHandLeave()
            end
        end
    end
end

function ArrowPuller:RefreshRope()
    self.lineRenderer:SetPosition(0, self.startPoint.localPosition)
    self.lineRenderer:SetPosition(1, self.rope.localPosition)
    self.lineRenderer:SetPosition(2, self.endPoint.localPosition)

end

function ArrowPuller:OnHandLeave()
    if IsNullOrDestroyed(self.usingHand) then
        return
    end
    if self.isPulling then
        
        if self.cancelArrowSound then
            self.cancelArrowSound.soundInfo:Play(self.usingHand.trans.position)
        end
        
        self:EndPull()
    end
    
    if IsNullOrDestroyed(self.triggerHand) or self.triggerHand ~= self.usingHand then
        self.usingHand:Ban(false)
        self.usingHand = nil
    end
    
    self.bow:OnCancel()
end

function ArrowPuller:StartPull()
    if not IsNullOrDestroyed(self.usingHand.attachTo) then
        local ib = self.usingHand.attachTo.interact
        if ib.unitType == CL.Tagger.Tag.InteractWeapon then
            self.bow:OnPutedWeapon(self.usingHand.attachTo.interact)
        end
        self.usingHand:Grab(nil)
        ib:OnDrop(false)
    end
    if IsNullOrDestroyed(self.usingHand) then
        return
    end
    self.isPulling = true
    
    if self.usingHand.character:IsMidAir() and CL.UnlockContentConfig.IsItemUnlockedAndEnabled("Func_AirStayRange") then
        self.usingHand.character:StartAerialStayByOthers(self.usingHand)
    end
    
    if self.spawnArrowSound then
        self.spawnArrowSound.soundInfo:Play(self.ib.trans.position)
    end
    
    self.startTime = UE.Time.time
    local ph = self.ib:GetPrimaryHand()
    self.attach:SetupHandPose(self.usingHand)

    if not IsNullOrDestroyed(ph) then
        local hld = ph.grabJoint.xDrive
        hld.positionSpring = self.holdHandSpring
        ph.grabJoint.xDrive = hld
        ph.grabJoint.yDrive = hld
        ph.grabJoint.zDrive = hld
        
        local sd = ph.grabJoint.slerpDrive
        sd.positionSpring = self.holdHandRotSpring
        sd.positionDamper = self.holdHandRotDamper
        ph.grabJoint.slerpDrive = sd
        self.handBowDot = UE.Vector3.Dot(ph.handDir.up, self.trans.up) > 0
    end
    
    self.bowSpace = UE.Quaternion.Inverse(self.trans.rotation) * self.ib.trans.rotation
    
    self.justPull = true
end

function ArrowPuller:UpdatePullJoint()
    local handPos = self.attach:GetHandPoseRef(self.usingHand)
    local anotherAnchorPos = self.ib.rb.transform:InverseTransformPoint(handPos.transform.position)
    self.usingHand.grabJoint.connectedAnchor = anotherAnchorPos
end

function ArrowPuller:EndPull()
    self.isPulling = false
    self.attach:ClearHandPose(self.usingHand)
    self.attach.transform.position = self.trans.position
    self.rope.position = self.trans.position
    
    local ld = self.usingHand.grabJoint.xDrive
    ld.positionSpring = 0
    self.usingHand.grabJoint.xDrive = ld
    self.usingHand.grabJoint.yDrive = ld
    self.usingHand.grabJoint.zDrive = ld
    self.usingHand.grabJoint.connectedBody = nil
    
    self.ib:SetTwoHandEnable(false)
    
    local ph = self.ib:GetPrimaryHand()
    if not IsNullOrDestroyed(ph) then
        local sd = ph.grabJoint.slerpDrive
        sd.positionSpring = self.ib.angularForce
        ph.grabJoint.slerpDrive = sd
    end
end

function ArrowPuller:UpdatePull()
    local hp = self.attach:GetHandPoseRef(self.usingHand)
    hp.tracker:UpdateTrack()
    
    local handRelativePos = self.trans:InverseTransformPoint(self.usingHand.trans.position)
    local diffZ = UE.Mathf.Clamp(handRelativePos.z, -self.pullMaxDis, 0)
    self.pullFactor = - diffZ/self.pullMaxDis
    local handPos = self.trans.position + self.trans.forward * diffZ
    self.attach.trans.position = handPos
    self.rope.position = handPos
    
    if UE.Time.time - self.startTime > 0.2 then
        self.shootFactorDeltaAcc = self.shootFactorDeltaAcc + UE.Mathf.Abs(self.pullFactor - self.lastShootFactor)
        if self.shootFactorDeltaAcc > 0.2 then
            self.usingHand:HapticPulse(self.usingHand.character.hitHapticCurve, 0.1, UE.Random.Range(0.25, 0.5))
            
            if self.pullArrowSound then
                self.pullArrowSound.soundInfo:Play(handPos)
            end
            
            self.shootFactorDeltaAcc = 0
        end
    end
    
    self.lastShootFactor = self.pullFactor
    
    local ph = self.ib:GetPrimaryHand()
    if IsNullOrDestroyed(ph) then
        return
    end
    
    local handDir = ph.transform.position - self.usingHand.grabJoint.transform.position
    local bowUp = self.handBowDot and ph.trans.forward or -ph.trans.forward
    
    local localRot = UE.Quaternion.LookRotation(handDir, bowUp)
    
    local worldBowRot = localRot * self.bowSpace
    CL.PhysicsFollow.TrackRotation(self.ib.rb, worldBowRot)
    
    self.lastLocalRot = localRot
end

return Class(nil, nil, ArrowPuller)